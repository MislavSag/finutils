// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// backtest_threshold
double backtest_threshold(NumericVector returns, NumericVector indicator, double threshold, bool sell_below);
RcppExport SEXP _finutils_backtest_threshold(SEXP returnsSEXP, SEXP indicatorSEXP, SEXP thresholdSEXP, SEXP sell_belowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indicator(indicatorSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type sell_below(sell_belowSEXP);
    rcpp_result_gen = Rcpp::wrap(backtest_threshold(returns, indicator, threshold, sell_below));
    return rcpp_result_gen;
END_RCPP
}
// opt_threshold
NumericVector opt_threshold(DataFrame df, DataFrame params, bool sell_below);
RcppExport SEXP _finutils_opt_threshold(SEXP dfSEXP, SEXP paramsSEXP, SEXP sell_belowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type sell_below(sell_belowSEXP);
    rcpp_result_gen = Rcpp::wrap(opt_threshold(df, params, sell_below));
    return rcpp_result_gen;
END_RCPP
}
// calculate_sma
NumericVector calculate_sma(NumericVector x, int n);
RcppExport SEXP _finutils_calculate_sma(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_sma(x, n));
    return rcpp_result_gen;
END_RCPP
}
// opt_with_sma_threshold
NumericVector opt_with_sma_threshold(DataFrame df, DataFrame params, bool sell_below);
RcppExport SEXP _finutils_opt_with_sma_threshold(SEXP dfSEXP, SEXP paramsSEXP, SEXP sell_belowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type sell_below(sell_belowSEXP);
    rcpp_result_gen = Rcpp::wrap(opt_with_sma_threshold(df, params, sell_below));
    return rcpp_result_gen;
END_RCPP
}
// wfo_combined
List wfo_combined(DataFrame df, DataFrame params, int window, std::string window_type, bool sell_below);
RcppExport SEXP _finutils_wfo_combined(SEXP dfSEXP, SEXP paramsSEXP, SEXP windowSEXP, SEXP window_typeSEXP, SEXP sell_belowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::string >::type window_type(window_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type sell_below(sell_belowSEXP);
    rcpp_result_gen = Rcpp::wrap(wfo_combined(df, params, window, window_type, sell_below));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_finutils_backtest_threshold", (DL_FUNC) &_finutils_backtest_threshold, 4},
    {"_finutils_opt_threshold", (DL_FUNC) &_finutils_opt_threshold, 3},
    {"_finutils_calculate_sma", (DL_FUNC) &_finutils_calculate_sma, 2},
    {"_finutils_opt_with_sma_threshold", (DL_FUNC) &_finutils_opt_with_sma_threshold, 3},
    {"_finutils_wfo_combined", (DL_FUNC) &_finutils_wfo_combined, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_finutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
